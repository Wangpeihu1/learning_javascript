语法
JavaScript的语法和Java语言类似，每个语句以;结束，语句块用{...}

注释
以//开头直到行末的字符被视为行注释，注释是给开发人员看到，JavaScript引擎会自动忽略

注意
JavaScript严格区分大小写

数据类型和变量
Number		不区分整数和浮点数
字符串		以单引号'或双引号"括起来的任意文本
布尔值		true false  &&运算是与运算  ||运算是或运算  !运算是非运算
比较运算符	javascript允许对任意数据类型做比较  ==会自动切换数据类型  ===不会自动切换数据类型
null		表示空	undefined		表示未定义
数组			按顺序排列的集合[],用,分隔每个元素  new Array(1,2,3);//创建数组[1,2,3]
对象			由键值组成的无序集合{},其中键又被称为属性，访问时用对象变量.属性名访问
变量			变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字 声明变量用var
JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true

strict模式
在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。
启用strict模式的方法是在JavaScript代码的第一行写上： 'use strict';


字符串详解
avaScript的字符串就是用''或""括起来的字符表示。
如果'本身也是一个字符，那就可以用""括起来，比如"I'm OK"包含的字符是I，'，m，空格，O，K这6个字符。
如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：
'I\'m \"OK\"!';
多行字符串
由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` ... ` 表示：
`这是一个多行
字符串`;
模板字符串
要把多个字符串连接起来，可以用+号连接：
如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：
var name = '小明';
var age = 20;
var message = `你好, ${name}, 你今年${age}岁了!`;
alert(message);
操作字符串
要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始
字符串还有几个函数
.length//求字符串长度
.toUpperCase//把字符串大写
.toLowerCase//把字符串小写
.indexOf//搜索指定字符串出现的位置
.substring//返回指定索引区间的字串


数组详解
JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。
取得Array的长度，直接访问length属性
与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置。
slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array
push和pop  push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
unshift和shift  要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：
reverse()把整个Array的元素给掉个个，也就是反转：
splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
// 从索引2开始删除3个元素,然后再添加两个元素:
arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
// 只删除,不添加:
arr.splice(2, 2); // ['Google', 'Facebook']
arr; // ['Microsoft', 'Apple', 'Oracle']
// 只添加,不删除:
arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：
join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串


对象详解
JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成
JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,键就是变量的属性
访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。
如果属性名包含特殊字符，就必须用''括起来，访问这个属性也无法使用.操作符，必须用['xxx']来访问
如果我们要检测xiaoming是否拥有某一属性，可以用in操作符
要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法


条件判断
JavaScript使用if () { ... } else { ... }来进行条件判断


循环
for循环，通过初始条件、结束条件和递增条件来循环执行语句块：
for (i=1; i<=10000; i++) {
    x = x + i;
}
for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环：for(;;)
for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来
由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的索引
请注意，for ... in对Array的循环得到的是String而不是Number。
while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现
do { ... } while()循环，它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件：


Map
JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。
但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。
为了解决这个问题，最新的ES6规范引入了新的数据类型Map
Map是一组键值对的结构，具有极快的查找速度
var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
m.get('Michael');
var m = new Map(); // 空Map
m.set('Adam', 67); // 添加新的key-value
m.set('Bob', 59);
m.has('Adam'); // 是否存在key 'Adam': true
m.get('Adam'); // 67
m.delete('Adam'); // 删除key 'Adam'
m.get('Adam'); // undefined

Set
Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key
通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：
通过delete(key)方法可以删除元素：


iterable
遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。
具有iterable类型的集合可以通过新的for ... of循环来遍历
for ... in循环遍历的实际上是对象的属性名称
for ... of循环集合本身的元素
forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：
a.forEach(function (element, index, array) {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    console.log(element + ', index = ' + index);
});
